# -*- coding: utf-8 -*-
"""geo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVibkpQJE05Vf1lV3XoS39cGlrOWfTJy
"""

class Rectangle: 

  # a rectangle is composed of 4 edges
  n_edges = 4

  # we initialize the width and length of the rectangle 
  def __init__(self, length, width):
      self.length = length
      self.width = width

  # we compute the area of the rectangle
  def rectangle_area(self):
    area = self.length*self.width
    print("The area of the rectangle is %s"%area)
    return area

  # we compute the perimeter of the rectangle
  def rectangle_perimeter(self):
    perimeter = 2*(self.length+self.width)
    print("The perimeter of the rectangle is %s"%perimeter)
    return perimeter

  @staticmethod
  def talk():
      return "Do you like rectangles?"


class Patch:

    # a patch has 4 edges too
    n_edges = 4

    def __init__(self, rectangle):
        # it is a square of length 1 and width 1
        self.length = 1
        self.width = 1
        # thes are the maximum corrdinates of the patch in the rectangle
        self.y_max = rectangle.length
        self.x_max = rectangle.width

    # we initialize the position of the patch in the rectangle
    def __iter__(self):
        self.x=1
        self.y=1
        return self
    
    # we go through the whole length and width of the rectangle 
    # and we get the powition of each patch
    def __next__(self):
        if self.x + 1 <= self.x_max:
            self.x = self.x + 1
        elif self.x + 1 > self.x_max:
            self.x = 1
            if self.y + 1 <= self.y_max:
                self.y = self.y + 1
            elif self.y + 1 > self.y_max:
                raise StopIteration
        return(self.x-1,self.y-1)


    def __str__(self):
        return 'Coordinates : x' + str(_next_(self)[0]) + ' ,y=' + str(_next_(self)[1])